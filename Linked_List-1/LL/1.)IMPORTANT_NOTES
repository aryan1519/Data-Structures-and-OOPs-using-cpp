First node of LL is called head and the last node is called tail

We use a class to make a node

Our node will have a data member

it will also have a pointer that will point to the next Node

We make a constructor in the class to always take data as input while
creating a node and initialize the node's next to NULL.

////////////////////////////////////////

Creating a Node in main
Statically
Node n1(2);

/////////////////////////////////////////
In the main we must make a pointer variable to keep the address of
the head of the LL

Node *head = &n1;

/////////////////////////////////////////
consider the following main
we make two nodes,connect them and then print the first node data

int main()
{
Node n1(1);
Node *head = &n1;

Node n2(2);

n1.next = &n2;

n1.next = &n2;
return 0;
}

/////////////////////////////////////////

Creating a Node in main
Dynamically

Node *n3  = new Node(10);
Node *n4 = new Node(20);


///////////////////////////////
connecting n3 and n4

n3->next = n4;

//////////////////////////////////////////////////////////

One way to make a linked list would be making a number of nodes and connextiong all of them
eg
Node n1(10);
Node *head = &n1;

Node n2(20);
Node n3(30);
Node n4(40);
Node n5(50);

//Now
n1.next = &n2;
n2.next = &n3;
n3.next = &n4;
n4.next = &n5;


This is not an efficient way and we can make a loop to improve it
Discussed later
For now consider this linked list

//////////////////////////

Printing the linked list

To print the linked list we just need the address of the head


printing the first node
cout<<head->data;

printing the second node
head = head->next;
cout<<head->data;

and we can repeat the process

We can use loops for the same

condition to stop
we cannot have while head->next = NULL
as that wont print the last nodes
So we can do the following

when head = NULL we stop

So to print the LL we can do the following

void print(Node *head)
{
while(head!= NULL)
{
cout<<head->data<<" ";
head = head->next;
}

}

Now if we write the same piece of code again to print the LL again
we notice that doesnt happen as the head has changed from the inital value and
is now NULL.


So we must create a temp variable.

If instead of writing the while twice to print twice we have it only once but
call the print function twice in the main.
we see that the LL is printed twice.
This is because head is passed by value.
////
////
////

///////////////////////////////////////////////
So our final print function should be as follows :-

void print(Node *head)
{
Node *temp = head;

while(temp != NULL)
{
cout<<temp->data;

temp = temp->next;
}
}
/////////////////////////////////////////////



Creating/Inserting in a LL
_____________________________

In our LL we will take data input from the user and will keep taking
input till we dont get -1 as input
The first step is creating the first node
We take the input of data of the first node and create the node
We make sur that even the first data input is not -1

Our function is of the type Node pointer as we will return the head pointer to the main so that
through the main we can use other funcitons like print.

We also create a head pointer to store the address of the first node
Initially it will be NULL.
If  *head is NULL it means there are no nodes in the LL


Node *takeInput()
{
int data;
cin>>data;

Node *head = NULL;

while(data !=-1)
{
Node n(data);
head = &n;
}
}

Now we can create the second nodes
We need to note that the head pointer should store the address
of only the first node.Thus we need need to add a condition.



Node *takeInput()
{
int data;
cin>>data;

Node *head = NULL;

while(data !=-1)
{
Node n(data);

  if(head == NULL)
  {
    head = &n;
  }
cin>>data;
}

}
Now we need to note that the node create is created statically and as soon as the loop
end the Node is deleted since it is out of scope.

So to tackle this problem we make the nodes Dynamically so that we have to
delete the node ourselves.


Node *takeInput()
{
int data;
cin>>data;

Node *head = NULL;

while(data !=-1)
{
Node *newNode = new Node(data);

  if(head == NULL)
  {
    head = &n;
  }
cin>>data;
}

}


Now adding the second node



Node *takeInput()
{
int data;
cin>>data;

Node *head = NULL;

while(data !=-1)
{
Node *newNode = new Node(data);

  if(head == NULL)
  {
    head = &n;
  }
  else
  {
    Node *temp = head;
    while(temp ->next != NULL)
      {
      temp = temp->next
      }
    temp->next = newNode;
  }
cin>>data;
}
return head;   // finally returning the head to main
}
///////////////////////////
IMPORTANT

In the above we see that the time complexity is n^2
The second loop inside the first one is unnecessary

What we can do is have another variable named tail that saves the last nodes address.

Initially when there are no nodes both head and tail are NULL

When we create the first node both head and tail save the address of this first nodes

CREATING THE FINAL TAKE INPUT FUNCTION

Node* takeInput()
{

int data;
cin>>data;
Node *head = NULL;
Node *tail = NULL;

while(data != -1)
{
Node *newNode = new Node(data);

    if(head == NULL)      //which means no node till now
    {
        head = newNode;
        tail = newNode;
    }

    else
    {
        tail->next = newNode;
        tail = newNode;
    }
cin>>data;
}
return head;
}

}
/////////////////////////////////////////////////////

Inserting node at ith position

We first create the node
We can then travel to the node before the required position and insert the node after this node.


void Insert_at_ith_posn(Node *head, int i,int data)
{
Node *newNode = new Node(data);

int count = 0;

Node *temp = head;

while(c < i-1)                     // Important to note that we have c < i-1 as after the loop temp points to next .
{
temp = temp->next;
count++;
}

newNode->next = temp->next;
temp->next = newNode;

}

//
//  IMPORTANT
//
// It is important to consider all possible inputs
// If the value of i exceeds the length the we get a segmentation error
// Hence we need to take care of that

void Insert_at_ith_posn(Node *head,int i, int data)
{
  Node *newNode = new Node(data);

  int count = 0;

    Node *temp = head;
  while(temp !=NULL && count<i-1)
    {
    temp = temp->next;
    count++;
    }

    if(temp!= NULL)
    {
    newNode->next = temp->next;
    temp->next = newNode;
    }
}


///////////////////////////
Another point of error is when i = 0
as the node is inserted in index = 1 according to our code
We need to correct this

In this case we need to make the newNode point the head and the bceome the head

ALSO SINCE THE HEAD CHANGES WE NEED TO CHANGE THE HEAD IN THE MAIN TO HENCE WE RETURN THE NEW HEAD

SO OUT Insert_at_ith_posn FUNCTION RETURN HEAD , NEW HEAD WHEN i=0 AND THE SAME OLD HEAD OTHERWISE.

THUS WE NEED TO CHANGE THE RETURN TYPE OF FUNCITON ADN ALSO RECEIVE THE VALUE OF HEAD IN THE MAIN ISNTEAD OF CALLING.


THUS THE FINAL Insert_at_ith_posn FUNCTION CAN BE WRITTEN AS FOLLOWS :-


Node* Insert_at_ith_posn(Node *head,int i, int data)
{
  Node *newNode = new Node(data);

  int count = 0; //It i important to initliaze it to 0 as it may store a garabage value

  Node *temp = head;

  if(i == 0 )
  {
  nextNode->next = head;
  head = newNode;
  return head;
  }
  while(temp !=NULL && count<i-1)
    {
    temp = temp->next;
    count++;
    }

    if(temp!= NULL)
    {
    newNode->next = temp->next;
    temp->next = newNode;
    }
    return head;

}






////////////////////////////////////////////////////////////

Deleting node at ith position

Important points should be checled like index>length and index = 0
head must be updated for i = 0 removal Hence the return type of the funciton wil be Node

The final function is as follows

Node* delete_at_i(Node *head,int i)
{
  Node *temp = head;
  if(i == 0)
  {
    head = head->next;
    delete temp;
    return head;
  }
  int count = 0 ;
  while(temp!=NULL && count<i-1)
  {
    temp = temp->next;
    count++;
  }
  if(temp!=NULL)
  {
    Node *a = temp->next;
    temp->next = temp->next->next;
    delete a;
  }
  return head;
}
